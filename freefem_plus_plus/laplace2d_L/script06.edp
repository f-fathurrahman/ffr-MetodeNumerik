// not used? real h = 0.05;

// Counterclockwise L-shaped border:
// (0,0) → (1,0) → (1,0.5) → (0.5,0.5) → (0.5,1) → (0,1) → (0,0)

border b1(t = 0, 1)     { x = t;     y = 0;     label = 1; } // (0,0) to (1,0)
border b2(t = 0, 0.5)   { x = 1;     y = t;     label = 2; } // (1,0) to (1,0.5)
border b3(t = 1, 0.5)   { x = t;     y = 0.5;   label = 3; } // (1,0.5) to (0.5,0.5)
border b4(t = 0.5, 1)   { x = 0.5;   y = t;     label = 4; } // (0.5,0.5) to (0.5,1)
border b5(t = 0.5, 0)   { x = t;     y = 1;     label = 5; } // (0.5,1) to (0,1)
border b6(t = 1, 0)     { x = 0;     y = t;     label = 6; } // (0,1) to (0,0)

//plot(b1(20) + b2(20) + b3(20) + b4(20) + b5(20) + b6(20),
//     wait=true, fill=false, cmm="Borders (no mesh)");

// Plot only the borders
//plot(b1(20) + b2(20) + b3(20) + b4(20) + b5(20) + b6(20),
//     wait=true, fill=false, cmm="Borders (no mesh)");

// Build the mesh
//mesh Th = buildmesh(b1(h) + b2(h) + b3(h) + b4(h) + b5(h) + b6(h)); // cannot use h
mesh Th = buildmesh(b1(20) + b2(20) + b3(20) + b4(20) + b5(20) + b6(20));

// Plot mesh with boundary labels for debugging
plot(Th, wait=true, fill=false, nbiso=1, cmm="Mesh with boundary labels");

// Define function space
fespace Vh(Th, P1);
Vh u, v;

// Dirichlet and Neumann data
func gD = 1.0;
func gN = 5.0;

// Solve Laplace equation with mixed BCs
problem laplace(u, v, solver=CG)
  = int2d(Th)(dx(u)*dx(v) + dy(u)*dy(v))
  - int1d(Th, 2, 5)(gN * v)       // Neumann on right lower and top
  + on(1,3,4,6, u=gD);            // Dirichlet elsewhere

// Solve the PDE
laplace;

// Plot the result
plot(u, value=true, fill=true, cmm="Solution u");