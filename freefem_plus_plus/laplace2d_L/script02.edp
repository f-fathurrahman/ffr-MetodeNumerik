// L-shaped domain Laplace equation solver

// Define borders of the L-shaped domain
border bottom(t=0, 1){x=t; y=0; label=1;};      // Bottom horizontal (Dirichlet)
border right(t=0, 1){x=1; y=t; label=2;};       // Right vertical (Neumann)
border top(t=1, 0){x=t; y=1; label=3;};         // Top horizontal (Dirichlet)
border left1(t=1, 0.5){x=0; y=t; label=4;};     // Left vertical part 1 (Robin)
border left2(t=0.5, 0){x=0; y=t; label=5;};     // Left vertical part 2 (Dirichlet)
border innerH(t=0, 1){x=t; y=0.5; label=6;};    // Inner horizontal
border innerV(t=0.5, 1){x=0.5; y=t; label=7;};  // Inner vertical

// Create mesh
mesh Th = buildmesh(bottom(20) + right(20) + top(20) + left1(10) + left2(10) + innerH(20) + innerV(10));

// Plot the mesh
plot(Th, wait=true, cmm="L-shaped mesh");

// Define finite element space
fespace Vh(Th, P1); // Piecewise linear elements
Vh u, v; // Trial and test functions

// Define boundary conditions and parameters
real alpha = 1.0; // Coefficient for Robin condition
func dirichletBC = sin(pi*x)*cos(pi*y); // Dirichlet condition function
func neumannBC = x + y; // Neumann condition function
func sourceTerm = 0; // Right-hand side (zero for Laplace equation)

// Define the variational problem
problem Laplace(u, v, solver=LU) 
    = int2d(Th)(dx(u)*dx(v) + dy(u)*dy(v)) // Bilinear form
    - int2d(Th)(sourceTerm*v)              // Source term
    - int1d(Th, 2)(neumannBC*v)            // Neumann BC on boundary 2
    + int1d(Th, 4)(alpha*u*v)              // Robin BC on boundary 4
    + on(1, 3, 5, u=dirichletBC);          // Dirichlet BCs on boundaries 1,3,5

// Solve the problem
Laplace;

// Plot the solution
plot(u, fill=true, value=true, wait=true, cmm="Solution of Laplace equation");