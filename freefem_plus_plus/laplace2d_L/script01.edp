// L-shaped domain Laplace equation solver

// Define borders of the L-shaped domain
border bordera(t=0, 1){x=t; y=0; label=1;};      // Bottom horizontal (Dirichlet)
border borderb(t=0, 1){x=1; y=t; label=2;};      // Right vertical (Neumann)
border borderc(t=1, 0){x=t; y=1; label=3;};     // Top horizontal (Dirichlet)
border borderd(t=1, 0.5){x=0; y=t; label=4;};    // Left vertical part 1 (Robin)
border bordere(t=0.5, 0){x=0; y=t; label=5;};    // Left vertical part 2 (Dirichlet)
border borderf(t=0, 1){x=t; y=0.5; label=6;};    // Inner horizontal
border borderg(t=0.5, 1){x=0.5; y=t; label=7;};  // Inner vertical

// Create mesh
mesh Th = buildmesh(
    bordera(20) +
    borderb(20) +
    borderc(20) +
    borderd(10) +
    bordere(10) +
    borderf(20) +
    borderg(10)
);

// Plot the mesh
plot(Th, wait=true, cmm="L-shaped mesh");

// Define finite element space
fespace Vh(Th, P1); // Piecewise linear elements
Vh u, v; // Trial and test functions

// Define boundary conditions and parameters
real alpha = 1.0; // Coefficient for Robin condition
func gD = sin(pi*x)*cos(pi*y); // Dirichlet condition function
func gN = x + y; // Neumann condition function
func f = 0; // Right-hand side (source term, zero for Laplace equation)

// Define the variational problem
problem Laplace(u, v, solver=LU) =
    int2d(Th)(dx(u)*dx(v) + dy(u)*dy(v)) // Bilinear form
    - int2d(Th)(f*v)                     // Source term
    - int1d(Th, 2)(gN*v)                 // Neumann BC on boundary 2
    + int1d(Th, 4)(alpha*u*v)            // Robin BC on boundary 4
    + on(1, 3, 5, u=gD);                 // Dirichlet BCs on boundaries 1,3,5

// Solve the problem
Laplace;

// Plot the solution
plot(u, fill=true, value=true, wait=true, cmm="Solution of Laplace equation");

// Compute gradient
Vh dxu = dx(u);
Vh dyu = dy(u);


// Plot the solution
plot(u, fill=true, value=true, wait=true, cmm="Solution of Laplace equation");

// Plot gradient magnitude
//plot(sqrt(dxu^2 + dyu^2), fill=true, value=true, wait=true, cmm="Gradient magnitude");
//
//// Save solution to file
//savemesh(Th, "Lshape.msh");
//ofstream file("Lshape_solution.txt");
//file << u[];